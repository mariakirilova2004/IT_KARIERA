// <auto-generated />
using DatabaseFirst;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DatabaseFirst.Migrations
{
    [DbContext(typeof(GeographyDBContext))]
    [Migration("20220212094230_Start")]
    partial class Start
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DatabaseFirst.Model.Continents", b =>
                {
                    b.Property<string>("ContinentCode")
                        .HasColumnName("continent_code")
                        .HasColumnType("char(2)")
                        .IsFixedLength(true)
                        .HasMaxLength(2);

                    b.Property<string>("ContinentName")
                        .IsRequired()
                        .HasColumnName("continent_name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ContinentCode")
                        .HasName("PRIMARY");

                    b.HasIndex("ContinentCode")
                        .IsUnique()
                        .HasName("PK_Continents");

                    b.ToTable("continents");
                });

            modelBuilder.Entity("DatabaseFirst.Model.Countries", b =>
                {
                    b.Property<string>("CountryCode")
                        .HasColumnName("country_code")
                        .HasColumnType("char(2)")
                        .IsFixedLength(true)
                        .HasMaxLength(2);

                    b.Property<int>("AreInSqKm")
                        .HasColumnName("are_in_sq_km")
                        .HasColumnType("int");

                    b.Property<string>("Capital")
                        .IsRequired()
                        .HasColumnName("capital")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("ContinentCode")
                        .IsRequired()
                        .HasColumnName("continent_code")
                        .HasColumnType("char(2)")
                        .IsFixedLength(true)
                        .HasMaxLength(2);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnName("country_name")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45);

                    b.Property<string>("CurrencyCode")
                        .HasColumnName("currency_code")
                        .HasColumnType("char(3)")
                        .IsFixedLength(true)
                        .HasMaxLength(3);

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasColumnName("iso_code")
                        .HasColumnType("char(3)")
                        .IsFixedLength(true)
                        .HasMaxLength(3);

                    b.Property<int>("Population")
                        .HasColumnName("population")
                        .HasColumnType("int");

                    b.HasKey("CountryCode")
                        .HasName("PRIMARY");

                    b.HasIndex("ContinentCode")
                        .HasName("fk_countries_continents");

                    b.HasIndex("CountryCode")
                        .IsUnique()
                        .HasName("PK_Countries");

                    b.HasIndex("CurrencyCode")
                        .HasName("fk_countries_currencies");

                    b.ToTable("countries");
                });

            modelBuilder.Entity("DatabaseFirst.Model.CountriesRivers", b =>
                {
                    b.Property<int>("RiverId")
                        .HasColumnName("river_id")
                        .HasColumnType("int");

                    b.Property<string>("CountryCode")
                        .HasColumnName("country_code")
                        .HasColumnType("char(2)")
                        .IsFixedLength(true)
                        .HasMaxLength(2);

                    b.HasKey("RiverId", "CountryCode")
                        .HasName("PRIMARY");

                    b.HasIndex("CountryCode", "RiverId")
                        .IsUnique()
                        .HasName("PK_CountriesRivers");

                    b.ToTable("countries_rivers");
                });

            modelBuilder.Entity("DatabaseFirst.Model.Currencies", b =>
                {
                    b.Property<string>("CurrencyCode")
                        .HasColumnName("currency_code")
                        .HasColumnType("char(3)")
                        .IsFixedLength(true)
                        .HasMaxLength(3);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("CurrencyCode")
                        .HasName("PRIMARY");

                    b.HasIndex("CurrencyCode")
                        .IsUnique()
                        .HasName("PK_Currencies");

                    b.ToTable("currencies");
                });

            modelBuilder.Entity("DatabaseFirst.Model.Mountains", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("MountainRange")
                        .IsRequired()
                        .HasColumnName("mountain_range")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("PK_Mountains");

                    b.ToTable("mountains");
                });

            modelBuilder.Entity("DatabaseFirst.Model.MountainsCountries", b =>
                {
                    b.Property<int>("MountainId")
                        .HasColumnName("mountain_id")
                        .HasColumnType("int");

                    b.Property<string>("CountryCode")
                        .HasColumnName("country_code")
                        .HasColumnType("char(2)")
                        .IsFixedLength(true)
                        .HasMaxLength(2);

                    b.HasKey("MountainId", "CountryCode")
                        .HasName("PRIMARY");

                    b.HasIndex("CountryCode")
                        .HasName("fk_mountains_countries_mountains");

                    b.HasIndex("MountainId", "CountryCode")
                        .IsUnique()
                        .HasName("PK_MountainsContinents");

                    b.ToTable("mountains_countries");
                });

            modelBuilder.Entity("DatabaseFirst.Model.Peaks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<int>("Elevation")
                        .HasColumnName("elevation")
                        .HasColumnType("int");

                    b.Property<int>("MountainId")
                        .HasColumnName("mountain_id")
                        .HasColumnType("int");

                    b.Property<string>("PeakName")
                        .IsRequired()
                        .HasColumnName("peak_name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("PK_Peaks");

                    b.HasIndex("MountainId")
                        .HasName("fk_peaks_mountains");

                    b.ToTable("peaks");
                });

            modelBuilder.Entity("DatabaseFirst.Model.Rivers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<int>("AverageDischarge")
                        .HasColumnName("average_discharge")
                        .HasColumnType("int");

                    b.Property<int>("DrainageArea")
                        .HasColumnName("drainage_area")
                        .HasColumnType("int");

                    b.Property<int>("Length")
                        .HasColumnName("length")
                        .HasColumnType("int");

                    b.Property<string>("Outflow")
                        .IsRequired()
                        .HasColumnName("outflow")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("RiverName")
                        .IsRequired()
                        .HasColumnName("river_name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("PK_Rivers");

                    b.ToTable("rivers");
                });

            modelBuilder.Entity("DatabaseFirst.Model.Countries", b =>
                {
                    b.HasOne("DatabaseFirst.Model.Continents", "ContinentCodeNavigation")
                        .WithMany("Countries")
                        .HasForeignKey("ContinentCode")
                        .HasConstraintName("fk_countries_continents")
                        .IsRequired();

                    b.HasOne("DatabaseFirst.Model.Currencies", "CurrencyCodeNavigation")
                        .WithMany("Countries")
                        .HasForeignKey("CurrencyCode")
                        .HasConstraintName("fk_countries_currencies");
                });

            modelBuilder.Entity("DatabaseFirst.Model.CountriesRivers", b =>
                {
                    b.HasOne("DatabaseFirst.Model.Countries", "CountryCodeNavigation")
                        .WithMany("CountriesRivers")
                        .HasForeignKey("CountryCode")
                        .HasConstraintName("fk_countries_rivers_countries")
                        .IsRequired();

                    b.HasOne("DatabaseFirst.Model.Rivers", "River")
                        .WithMany("CountriesRivers")
                        .HasForeignKey("RiverId")
                        .HasConstraintName("fk_countries_rivers_rivers")
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseFirst.Model.MountainsCountries", b =>
                {
                    b.HasOne("DatabaseFirst.Model.Countries", "CountryCodeNavigation")
                        .WithMany("MountainsCountries")
                        .HasForeignKey("CountryCode")
                        .HasConstraintName("fk_mountains_countries_mountains")
                        .IsRequired();

                    b.HasOne("DatabaseFirst.Model.Mountains", "Mountain")
                        .WithMany("MountainsCountries")
                        .HasForeignKey("MountainId")
                        .HasConstraintName("fk_mountains_countries_countries")
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseFirst.Model.Peaks", b =>
                {
                    b.HasOne("DatabaseFirst.Model.Mountains", "Mountain")
                        .WithMany("Peaks")
                        .HasForeignKey("MountainId")
                        .HasConstraintName("fk_peaks_mountains")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
